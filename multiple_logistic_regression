ggplot(data = mpg_manuals, aes(x = factor(year), y = hwy)) + geom_boxplot

A parallel slopes model would look like

lm(hw~ displ+factor(year), data = mpg)

----------------------
# Explore the data
glimpse(mario_kart)

# fit parallel slopes
lm(totalPr ~ wheels + cond, data = mario_kart)

-----------------------
# Augment the model
augmented_mod <- augment(mod)
glimpse(augmented_mod)

# scatterplot, with color
data_space <- ggplot(augmented_mod, aes(x = wheels, y = totalPr, color = cond)) + 
  geom_point()
  
# single call to geom_line()
data_space + 
  geom_line(aes(y = .fitted))
  --------------------------------
  # build model
lm(formula = bwt ~ parity + age, data = babies)


---------------------
# build model
names(babies)
lm(formula = bwt ~ gestation + smoke, data = babies)

---------------------
# R^2 and adjusted R^2
summary(mod)

# add random noise
mario_kart_noisy <- mario_kart %>%
mutate(noise = rnorm(nrow(mario_kart)))
  
# compute new model
mod2 <- lm(totalPr ~ wheels + cond + noise, mario_kart_noisy)

# new R^2 and adjusted R^2
summary(mod2)
---------------------------
# return a vector
predict(mod)

# return a data frame
augment(mod)

------------------------
# include interaction
lm(totalPr ~ cond + duration+ cond:duration, mario_kart)
---------------------
# interaction plot
ggplot(mario_kart, aes(y = totalPr, x = duration, color = cond)) + 
  geom_point() + 
  geom_smooth(method = "lm", se = FALSE)
  --------------------------------
  slr <- ggplot(mario_kart, aes(y = totalPr, x = duration)) + 
  geom_point() + 
  geom_smooth(method = "lm", se = 0)

# model with one slope
lm(totalPr ~ duration, mario_kart)

# plot with two slopes
slr + aes(color = cond)
-------------------------------------
# Fit the model using duration and startPr
names(mario_kart)
lm(totalPr ~ duration + startPr, mario_kart)
--------------------------------------
# add predictions to grid
price_hats <- augment(mod, newdata = grid)

# tile the plane
data_space + 
  geom_tile(data = price_hats, aes(fill = .fitted), alpha = 0.5)
  --------------------------------------
  # draw the 3D scatterplot
p <- plot_ly(data = mario_kart, z = ~totalPr, x = ~duration, y = ~startPr, opacity = 0.6) %>%
  add_markers() 
  
# draw the plane
p %>%
  add_surface(x = ~x, y = ~y, z = ~plane, showscale = FALSE)
  ----------------------------------------
  # draw the 3D scatterplot
p <- plot_ly(data = mario_kart, z = ~totalPr, x = ~duration, y = ~startPr, opacity = 0.6) %>%
  add_markers(color = ~ cond) 
  
# draw two planes
p %>%
  add_surface(x = ~x, y = ~y, z = ~plane0, showscale = FALSE) %>%
  add_surface(x = ~x, y = ~y, z = ~plane1, showscale = FALSE)

------------------------------------------------------
# scatterplot with jitter
data_space <- ggplot(data = MedGPA, aes(y = Acceptance, x = GPA)) + 
  geom_jitter(width = 0, height = 0.05, alpha = 0.5)

# linear regression line
data_space + 
  geom_smooth(method = "lm", se = FALSE)
  
  -------------------------------------------------
  # filter
names(MedGPA)
MedGPA_middle <- MedGPA %>%
filter(GPA >= 3.375, GPA <= 3.77)

# scatterplot with jitter
data_space <- ggplot(MedGPA_middle, aes(y = Acceptance, x = GPA)) + 
  geom_jitter(width = 0, height = .05, alpha = 0.5)

# linear regression line
data_space + 
  geom_smooth(se = FALSE, method = "lm")
  ------------------------------------------------
  # fit model
glm(Acceptance~GPA, data = MedGPA, family = binomial)


--------------------------------------------------
# scatterplot with jitter
data_space <- ggplot(MedGPA, aes(y= Acceptance, x = GPA)) + 
  geom_jitter(width = 0, height = .05, alpha = .5)

# add logistic curve
data_space +
  geom_smooth(method = "glm", method.args = list(family = "binomial"), se = FALSE, color = "red") + geom_smooth(method = "lm", se = FALSE)
  
  ----------------------------------------------------
  # binned points and line
data_space <- ggplot(data = MedGPA_binned, aes(x = mean_GPA, y = acceptance_rate)) + 
  geom_point() + geom_line()

# augmented model
MedGPA_plus <- mod %>%
  augment(type.predict = "response")

# logistic model on probability scale
data_space +
  geom_line(data = MedGPA_plus, aes(x = GPA, y = .fitted), color = "red")
  
  
  ------------------------------------------------------------
  # compute odds for bins
MedGPA_binned <- MedGPA_binned %>%
  mutate(odds = acceptance_rate / (1 - acceptance_rate))

# plot binned odds
data_space <- ggplot(data = MedGPA_binned, aes(x = mean_GPA, y = odds)) + 
  geom_point() + geom_line()

# compute odds for observations
MedGPA_plus <- MedGPA_plus %>%
  mutate(odds_hat = .fitted / (1 - .fitted))

# logistic model on odds scale
data_space +
  geom_line(data = MedGPA_plus, aes(x = GPA, y = odds_hat), color = "red")
  ----------------------------------
  # compute log odds for bins
MedGPA_binned <- MedGPA_binned %>%
  mutate(log_odds = log(acceptance_rate / (1 - acceptance_rate)))

# plot binned log odds
data_space <- ggplot(data = MedGPA_binned, aes(x = mean_GPA, y = log_odds)) + 
  geom_point() + geom_line()

# compute log odds for observations
MedGPA_plus <- MedGPA_plus %>%
  mutate(log_odds_hat = log(.fitted / (1 - .fitted)))

# logistic model on log odds scale
data_space +
  geom_line(data = MedGPA_plus, aes(x = GPA, y = log_odds_hat), color = "red")
  ------------------------------------------
  # create new data frame
new_data <- data.frame(GPA = 3.51)

# make predictions
augment(mod, newdata = new_data, type.predict = "response")
---------------------------------------------
# data frame with binary predictions
tidy_mod <- augment(mod, type.predict = "response") %>% mutate(Acceptance_hat = round(.fitted))
  
# confusion matrix
tidy_mod %>%
  select(Acceptance, Acceptance_hat) %>% 
  table()
  ----------------------------------
  CASE STUDY ITALIAN RESTAURANTS IN NYC
  pairs(nyc)
  
  # Price by Food plot
ggplot(nyc, aes(x = Food, y = Price)) + geom_point()
# Price by Food model
lm(Price ~ Food, nyc)
-----------------

# fit model
lm(Price~Food+Service, nyc)

# draw 3D scatterplot
p <- plot_ly(data = nyc, z = ~Price, x = ~Food, y = ~Service, opacity = 0.6) %>%
  add_markers() 

# draw a plane
p %>%
  add_surface(x = ~x, y = ~y, z = ~plane, showscale = FALSE) 
  -----------------------------
  # Price by Food and Service and East
lm(Price~Food+Service+East, nyc)
---------------------------------------
# draw 3D scatterplot
p <- plot_ly(data = nyc, z = ~Price, x = ~Food, y = ~Service, opacity = 0.6) %>%
  add_markers(color = ~factor(East)) 

# draw two planes
p %>%
  add_surface(x = ~x, y = ~y, z = ~plane0, showscale = FALSE) %>%
  add_surface(x = ~x, y = ~y, z = ~plane1, showscale = FALSE)
  -------------------------------
